# This is a basic workflow to help you get started with Actions

name: CIStaging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: ['8.0.282'] 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.6 
        with:
          path: ~/.gradle/caches  
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }} 
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK
        uses: actions/setup-java@v2.1.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew check --parallel --continue  
      - name: war
        run: ./gradlew assemble
      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@4.1.0
        with:
          server: ${{ secrets.CD_FTP_SERVER }}
          # ftp username
          username: ${{ secrets.CD_FTP_USERNAME }}
          # ftp password
          password: ${{ secrets.CD_FTP_PASSWORD }}

          # Folder to upload from, must end with trailing slash /
          local-dir: "build/libs/"
          

        
